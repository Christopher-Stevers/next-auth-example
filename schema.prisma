model Account {
  id                          String               @id @default(auto()) @map("_id") @db.ObjectId
  user                        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String               @db.ObjectId
  type                        String
  provider                    String
  providerAccountId           String
  refresh_token               String?
  refresh_token_expires_in    Int?
  access_token                String?
  expires_at                  Int?
  token_type                  String?
  scope                       String?
  id_token                    String?
  session_state               String?
  Evaluation                  Evaluation[]
  CampaignEvaluation          CampaignEvaluation[]
  ok                          Boolean?
  state                       String?

  @@unique([provider, providerAccountId])
}

model Session {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken   String           @unique
  userId         String           @db.ObjectId
  expires        DateTime
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  role                String                @default("user")
  email               String                @unique
  emailVerified       DateTime?
  contactEmail        String?
  image               String?
  accounts            Account[]
  sessions            Session[]
  firstName           String                @default("")
  lastName            String                @default("")
  lastSeen            DateTime              @default(now())
}
model TeamAccount {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                   String                  @unique
  teamAccountUsers       User[]                  @relation(fields: [teamAccountUserIds], references: [id])
  teamAccountUserIds     String[]                @db.ObjectId
  discordGuildTarget     DiscordGuildTarget?     @relation(fields: [discordGuildTargetId], references: [id])
  discordGuildTargetId   String?
  }


model DiscordGuildTarget {
  id              String           @id @map("_id")
  name            String
  teamAccounts    TeamAccount[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
